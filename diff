diff --git a/regex-match.cpp b/regex-match.cpp
index 98422d5..e96f8be 100644
--- a/regex-match.cpp
+++ b/regex-match.cpp
@@ -14,51 +14,13 @@ struct match_unit {
 };
 
 // p has no ".*", it is either pure string, or string with '*'
-static bool is_match_internal(string s, vector<match_unit> p, int *length)
+static bool partial_match(string s, vector<match_unit> p, int *length)
 {
-  if (p.empty()) {
-    *length = 0;
-    return true;
-  }
-
-  /* calculate nextval[] array */
-  vector<int> nextval(p.size());
-  nextval[0] = 0; // initialization
-  vector<int>::iterator visit_it = nextval.begin()+1, value_it = nextval.begin();
-  while (visit_it != nextval.end()) {
-    if (value_it == nextval.begin() || p[visit_it-nextval.begin()].val == p[value_it-nextval.begin()].val) {
-      *visit_it = nextval[value_it-nextval.begin()];
-      visit_it++, value_it++;
-    }
-    else {
-      value_it = nextval.begin()+*value_it;
+  for (int i = 0; i < p.size(); i++) {
+    if (p[i].val != s[i] && p[i].type != zero_or_more) {
+      
     }
   }
-
-  vector<match_unit>::iterator patern_it = p.begin();
-  int len = 0;
-  for (int i = 0; i < s.size(); i++) {
-    if (s[i] == patern_it->val || patern_it->val == '.') {
-      if (patern_it+1 == p.end()) {
-        *length = len;
-        return true;
-      }
-      if (patern_it->type == zero_or_more) {
-        len++;
-        continue;
-      }
-      patern_it++;
-      len++;
-    }
-    else if (patern_it->type == zero_or_more) // *patern_it doesn't match
-      patern_it++, i--;
-    else {
-      len = 0;
-      patern_it -= nextval[patern_it-p.begin()];
-    }
-  }
-  *length = 0;
-  return false;
 }
 
 class Solution {
@@ -88,13 +50,18 @@ public:
     
     /* now vector patern has no multiple signs, and '*' is real '*' */
     int end_index = 0, substr_length = 0;
-    for (int i = 0; i < patern_group.size(); i++) {
+    if (is_match_internal(s, patern_group[0], &substr_length, false) != true) { // the first must match from the begin of s
+      return false;
+    }
+    end_index+=substr_length;
+    for (int i = 1; i < patern_group.size(); i++) {
       // find patern_slice in the according substring
-      if (is_match_internal(s.substr(end_index), patern_group[i], &substr_length) != true) {
+      if (is_match_internal(s.substr(end_index), patern_group[i], &substr_length, true) != true) 
         return false;
-      }
+      end_index+=substr_length;
     }
-    
+    if (end_index != s.size()-1)
+      return false; // there is substrings remain after the last match
     return true;
   }
 };
